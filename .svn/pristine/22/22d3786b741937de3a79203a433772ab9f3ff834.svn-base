#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name:zhaoshenglong
# ID  :515030910241
# Describe how and why you modified the baseline code.
# Descriptions:
# 1. optimize the load/use hazard
# 	so that mr and rm will not stall
# 2. add iaddq instruction so that I can reduce the instructions
# 3. use loop unrolling, First I tried 8 unrolling, if only use once unrolling 
#    technique, 6 is the fastest, but it still not the best answer, so I tried to 
#    unroll 12, 16 loops, and for the remained ,use 2, 3 unrolling, it is faster,
#    but still didn't get full score.
#    I could not  think any other way to optimize it, and I tried once and once,
#    and in the end, I think I should tried to change the hcl fifle, so I did.
#
#    The loop unrolling using here is first 12 unrolling, and for the rest 11, use
#    3 unrolling, and for the rest 2, use switch to jmp to the target
#    For the unrolling, it is not the fastest I've tried, it only get 7.99 CPE, 
#    but it is the last technique I've tried, and after modify the hcl file, I got
#    full score, so I didn't modify it. 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-12, %rdx
	jle Remain
Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	mrmovq 0x8(%rdi),%r10
	rmmovq %r10,0x8(%rsi)
	jl Next1
	iaddq $1,%rax		# count++
Next1:	
	andq %r10, %r10
	mrmovq 0x10(%rdi),%r10
	rmmovq %r10,0x10(%rsi)
	jl Next2
	iaddq $1, %rax
Next2:
	andq %r10,%r10
	mrmovq 0x18(%rdi),%r10
	rmmovq %r10,0x18(%rsi)
	jl Next3
	iaddq $1,%rax
Next3:	
	andq %r10,%r10
	mrmovq 0x20(%rdi),%r10
	rmmovq %r10,0x20(%rsi)
	jl Next4
	iaddq $1,%rax
Next4:	
	andq %r10,%r10
	mrmovq 0x28(%rdi),%r10
	rmmovq %r10,0x28(%rsi)
	jl Next5
	iaddq $1,%rax
Next5:
	andq %r10, %r10
	mrmovq 0x30(%rdi),%r10
	rmmovq %r10,0x30(%rsi)
	jl Next6
	iaddq $1, %rax
Next6:
	andq %r10,%r10
	mrmovq 0x38(%rdi),%r10
	rmmovq %r10,0x38(%rsi)
	jl Next7
	iaddq $1,%rax
Next7:	
	andq %r10, %r10
	mrmovq 0x40(%rdi),%r10
	rmmovq %r10,0x40(%rsi)
	jl Next8
	iaddq $1,%rax
Next8:	
	andq %r10, %r10
	mrmovq 0x48(%rdi),%r10
	rmmovq %r10,0x48(%rsi)
	jl Next9
	iaddq $1,%rax
Next9:	
	andq %r10, %r10
	mrmovq 0x50(%rdi),%r10
	rmmovq %r10,0x50(%rsi)
	jl Next10
	iaddq $1,%rax
Next10:	
	andq %r10, %r10
	mrmovq 0x58(%rdi),%r10
	rmmovq %r10,0x58(%rsi)
	jl Next11
	iaddq $1,%rax
Next11:
	andq %r10, %r10
	jl Npos
	iaddq $1, %rax
Npos:	
	iaddq $0x60, %rdi	# src++
	iaddq $0x60, %rsi	# dst++
	iaddq $-12, %rdx		# len--
	jge Loop

Remain:
	iaddq $12, %rdx
	je Done			# == 0
	iaddq $-1, %rdx
	je RRemain1		# ==1
	iaddq $-1, %rdx		# ==2
	je RRemain2
	iaddq $-1, %rdx

RLoop:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)
	andq   %r10,%r10
	jle RNext1
	iaddq   $1, %rax
RNext1:
	mrmovq 0x8(%rdi),%r10
	rmmovq %r10, 0x8(%rsi)
	andq %r10,%r10
	jle RNext2
	iaddq $1, %rax
RNext2:
	mrmovq 0x10(%rdi),%r10
	rmmovq %r10, 0x10(%rsi)
	andq %r10,%r10
	jle RNpos
	iaddq $1, %rax
RNpos:	
	iaddq $0x18, %rdi
	iaddq $0x18,%rsi
	iaddq $-3, %rdx
	jge RLoop
	iaddq $3, %rdx
	je Done
	iaddq $-1, %rdx
	je RRemain1
	jmp RRemain2
RRemain1:
	mrmovq (%rdi),%r10
	rmmovq %r10, (%rsi)
	andq %r10,%r10
	jle Done
	iaddq $1, %rax
	ret
RRemain2:
	mrmovq (%rdi),%r10
	rmmovq %r10, (%rsi)
	andq %r10,%r10
	jle RNext3
	iaddq $1, %rax
RNext3:
	mrmovq 0x8(%rdi),%r10
	rmmovq %r10, 0x8(%rsi)
	andq %r10,%r10
	jle Done
	iaddq $1, %rax
	ret
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
